version: '3.8'

services:
  backend:
    build: 
      context: ./backend
    restart: always
    expose:
      - "8000"
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - SECRET_KEY=${SECRET_KEY}
      - ONEC_API_URL=${ONEC_API_URL}
      - ONEC_API_USER=${ONEC_API_USER}
      - ONEC_API_PASSWORD=${ONEC_API_PASSWORD}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    # В производственной среде не используем режим разработки и не перезагружаем сервер
    command: >
      sh -c "alembic upgrade head &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4"
    networks:
      - app-network

  frontend:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      # Дополнительная конфигурация для HTTPS
      - /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem:/etc/nginx/ssl/fullchain.pem
      - /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem:/etc/nginx/ssl/privkey.pem
    depends_on:
      - backend
    networks:
      - app-network

  db:
    image: postgres:14
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
      # Добавляем том для резервных копий
      - ./backups:/backups
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    # Не открываем порт наружу в производственной среде
    expose:
      - "5432"
    networks:
      - app-network

  redis:
    image: redis:alpine
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    networks:
      - app-network

  # Добавляем сервис для резервного копирования
  backup:
    image: postgres:14
    volumes:
      - ./backups:/backups
      - ./backup-scripts:/scripts
    depends_on:
      - db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    entrypoint: ["bash", "/scripts/backup.sh"]
    networks:
      - app-network
    # Запускаем резервное копирование каждую ночь в 2:00
    deploy:
      restart_policy:
        condition: none
      placement:
        constraints: [node.role == manager]

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
